// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/stream_string.proto

package stream_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StringRequest struct {
	A                    string   `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	B                    string   `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringRequest) Reset()         { *m = StringRequest{} }
func (m *StringRequest) String() string { return proto.CompactTextString(m) }
func (*StringRequest) ProtoMessage()    {}
func (*StringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b40beb9bbf77d90, []int{0}
}

func (m *StringRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringRequest.Unmarshal(m, b)
}
func (m *StringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringRequest.Marshal(b, m, deterministic)
}
func (m *StringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringRequest.Merge(m, src)
}
func (m *StringRequest) XXX_Size() int {
	return xxx_messageInfo_StringRequest.Size(m)
}
func (m *StringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StringRequest proto.InternalMessageInfo

func (m *StringRequest) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *StringRequest) GetB() string {
	if m != nil {
		return m.B
	}
	return ""
}

type StringResponse struct {
	Ret                  string   `protobuf:"bytes,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringResponse) Reset()         { *m = StringResponse{} }
func (m *StringResponse) String() string { return proto.CompactTextString(m) }
func (*StringResponse) ProtoMessage()    {}
func (*StringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b40beb9bbf77d90, []int{1}
}

func (m *StringResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringResponse.Unmarshal(m, b)
}
func (m *StringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringResponse.Marshal(b, m, deterministic)
}
func (m *StringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringResponse.Merge(m, src)
}
func (m *StringResponse) XXX_Size() int {
	return xxx_messageInfo_StringResponse.Size(m)
}
func (m *StringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StringResponse proto.InternalMessageInfo

func (m *StringResponse) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

func (m *StringResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*StringRequest)(nil), "pb.StringRequest")
	proto.RegisterType((*StringResponse)(nil), "pb.StringResponse")
}

func init() { proto.RegisterFile("pb/stream_string.proto", fileDescriptor_8b40beb9bbf77d90) }

var fileDescriptor_8b40beb9bbf77d90 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x48, 0xd2, 0x2f,
	0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x8d, 0x2f, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe6, 0xe2, 0x0d, 0x06, 0x8b, 0x05, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x70, 0x31, 0x3a, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x31, 0x3a, 0x82, 0x78, 0x4e, 0x12, 0x4c, 0x10, 0x9e, 0x93, 0x92, 0x09, 0x17, 0x1f, 0x4c, 0x71,
	0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x00, 0x17, 0x73, 0x50, 0x6a, 0x09, 0x54, 0x3d, 0x88,
	0x09, 0x12, 0x49, 0x2d, 0x2a, 0x82, 0xea, 0x01, 0x31, 0x8d, 0x26, 0x30, 0xc1, 0xec, 0x08, 0x4e,
	0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x32, 0xe4, 0x62, 0x73, 0xce, 0xcf, 0x4b, 0x4e, 0x2c, 0x11,
	0x12, 0xd4, 0x2b, 0x48, 0xd2, 0x43, 0x71, 0x80, 0x94, 0x10, 0xb2, 0x10, 0xc4, 0x1a, 0x25, 0x06,
	0x21, 0x7b, 0x2e, 0x21, 0x9f, 0xfc, 0x92, 0x62, 0xff, 0x34, 0x90, 0x19, 0xa9, 0x45, 0xc1, 0x60,
	0xef, 0x10, 0xad, 0xdd, 0x80, 0x11, 0x61, 0x80, 0x73, 0x4e, 0x66, 0x6a, 0x5e, 0x09, 0x89, 0x06,
	0x68, 0x30, 0x0a, 0x79, 0x71, 0x49, 0x23, 0xbb, 0xc0, 0x31, 0x2f, 0x85, 0x4c, 0x93, 0x0c, 0x18,
	0x93, 0xd8, 0xc0, 0x11, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x5d, 0xb2, 0x29, 0x9a,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StringServiceClient is the client API for StringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StringServiceClient interface {
	Concat(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	LotsOfServerStream(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (StringService_LotsOfServerStreamClient, error)
	LotsOfClientStream(ctx context.Context, opts ...grpc.CallOption) (StringService_LotsOfClientStreamClient, error)
	LotsOfServerAndClientStream(ctx context.Context, opts ...grpc.CallOption) (StringService_LotsOfServerAndClientStreamClient, error)
}

type stringServiceClient struct {
	cc *grpc.ClientConn
}

func NewStringServiceClient(cc *grpc.ClientConn) StringServiceClient {
	return &stringServiceClient{cc}
}

func (c *stringServiceClient) Concat(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/pb.StringService/Concat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringServiceClient) LotsOfServerStream(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (StringService_LotsOfServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StringService_serviceDesc.Streams[0], "/pb.StringService/LotsOfServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stringServiceLotsOfServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StringService_LotsOfServerStreamClient interface {
	Recv() (*StringResponse, error)
	grpc.ClientStream
}

type stringServiceLotsOfServerStreamClient struct {
	grpc.ClientStream
}

func (x *stringServiceLotsOfServerStreamClient) Recv() (*StringResponse, error) {
	m := new(StringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stringServiceClient) LotsOfClientStream(ctx context.Context, opts ...grpc.CallOption) (StringService_LotsOfClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StringService_serviceDesc.Streams[1], "/pb.StringService/LotsOfClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stringServiceLotsOfClientStreamClient{stream}
	return x, nil
}

type StringService_LotsOfClientStreamClient interface {
	Send(*StringRequest) error
	CloseAndRecv() (*StringResponse, error)
	grpc.ClientStream
}

type stringServiceLotsOfClientStreamClient struct {
	grpc.ClientStream
}

func (x *stringServiceLotsOfClientStreamClient) Send(m *StringRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stringServiceLotsOfClientStreamClient) CloseAndRecv() (*StringResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stringServiceClient) LotsOfServerAndClientStream(ctx context.Context, opts ...grpc.CallOption) (StringService_LotsOfServerAndClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StringService_serviceDesc.Streams[2], "/pb.StringService/LotsOfServerAndClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stringServiceLotsOfServerAndClientStreamClient{stream}
	return x, nil
}

type StringService_LotsOfServerAndClientStreamClient interface {
	Send(*StringRequest) error
	Recv() (*StringResponse, error)
	grpc.ClientStream
}

type stringServiceLotsOfServerAndClientStreamClient struct {
	grpc.ClientStream
}

func (x *stringServiceLotsOfServerAndClientStreamClient) Send(m *StringRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stringServiceLotsOfServerAndClientStreamClient) Recv() (*StringResponse, error) {
	m := new(StringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StringServiceServer is the server API for StringService service.
type StringServiceServer interface {
	Concat(context.Context, *StringRequest) (*StringResponse, error)
	LotsOfServerStream(*StringRequest, StringService_LotsOfServerStreamServer) error
	LotsOfClientStream(StringService_LotsOfClientStreamServer) error
	LotsOfServerAndClientStream(StringService_LotsOfServerAndClientStreamServer) error
}

// UnimplementedStringServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStringServiceServer struct {
}

func (*UnimplementedStringServiceServer) Concat(ctx context.Context, req *StringRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concat not implemented")
}
func (*UnimplementedStringServiceServer) LotsOfServerStream(req *StringRequest, srv StringService_LotsOfServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LotsOfServerStream not implemented")
}
func (*UnimplementedStringServiceServer) LotsOfClientStream(srv StringService_LotsOfClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LotsOfClientStream not implemented")
}
func (*UnimplementedStringServiceServer) LotsOfServerAndClientStream(srv StringService_LotsOfServerAndClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LotsOfServerAndClientStream not implemented")
}

func RegisterStringServiceServer(s *grpc.Server, srv StringServiceServer) {
	s.RegisterService(&_StringService_serviceDesc, srv)
}

func _StringService_Concat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServiceServer).Concat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StringService/Concat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServiceServer).Concat(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringService_LotsOfServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StringServiceServer).LotsOfServerStream(m, &stringServiceLotsOfServerStreamServer{stream})
}

type StringService_LotsOfServerStreamServer interface {
	Send(*StringResponse) error
	grpc.ServerStream
}

type stringServiceLotsOfServerStreamServer struct {
	grpc.ServerStream
}

func (x *stringServiceLotsOfServerStreamServer) Send(m *StringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StringService_LotsOfClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StringServiceServer).LotsOfClientStream(&stringServiceLotsOfClientStreamServer{stream})
}

type StringService_LotsOfClientStreamServer interface {
	SendAndClose(*StringResponse) error
	Recv() (*StringRequest, error)
	grpc.ServerStream
}

type stringServiceLotsOfClientStreamServer struct {
	grpc.ServerStream
}

func (x *stringServiceLotsOfClientStreamServer) SendAndClose(m *StringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stringServiceLotsOfClientStreamServer) Recv() (*StringRequest, error) {
	m := new(StringRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StringService_LotsOfServerAndClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StringServiceServer).LotsOfServerAndClientStream(&stringServiceLotsOfServerAndClientStreamServer{stream})
}

type StringService_LotsOfServerAndClientStreamServer interface {
	Send(*StringResponse) error
	Recv() (*StringRequest, error)
	grpc.ServerStream
}

type stringServiceLotsOfServerAndClientStreamServer struct {
	grpc.ServerStream
}

func (x *stringServiceLotsOfServerAndClientStreamServer) Send(m *StringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stringServiceLotsOfServerAndClientStreamServer) Recv() (*StringRequest, error) {
	m := new(StringRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StringService",
	HandlerType: (*StringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Concat",
			Handler:    _StringService_Concat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LotsOfServerStream",
			Handler:       _StringService_LotsOfServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LotsOfClientStream",
			Handler:       _StringService_LotsOfClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LotsOfServerAndClientStream",
			Handler:       _StringService_LotsOfServerAndClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/stream_string.proto",
}
